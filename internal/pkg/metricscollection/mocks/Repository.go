// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCounterMetric provides a mock function with given fields: name
func (_m *Repository) GetCounterMetric(name string) (int64, error) {
	ret := _m.Called(name)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGaugeMetric provides a mock function with given fields: name
func (_m *Repository) GetGaugeMetric(name string) (float64, error) {
	ret := _m.Called(name)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCounterMetric provides a mock function with given fields: name, value
func (_m *Repository) SaveCounterMetric(name string, value int64) {
	_m.Called(name, value)
}

// SaveGaugeMetric provides a mock function with given fields: name, value
func (_m *Repository) SaveGaugeMetric(name string, value float64) {
	_m.Called(name, value)
}

type NewRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t NewRepositoryT) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
